@mixin clearfix {
  &:after {
    display: table;
    clear: both;
    content: '';
  }
}

/*
* Ex: @include breakpoint(large, down) {}
*/
@mixin breakpoint($size, $direction) {

  @if $size == 'small' and $direction == 'only' {
    @media (min-width: #{$small}) and (max-width: #{$medium - 1}) { @content; }
  } @else if $size == 'medium' and $direction == 'only' {
    @media (min-width: #{$medium}) and (max-width: #{$large - 1}) { @content; }
  } @else if $size == 'large' and $direction == 'only' {
    @media (min-width: #{$large}) and (max-width: #{$xlarge - 1}) { @content; }
  } @else if $size == 'small' and $direction == 'down' {
    @media (max-width: #{$small}) { @content; }
  } @else if $size == 'medium' and $direction == 'down' {
    @media (max-width: #{$medium}) { @content; }
  } @else if $size == 'large' and $direction == 'down' {
    @media (max-width: #{$large}) { @content; }
  } @else if $size == 'xlarge' and $direction == 'down' {
    @media (max-width: #{$xlarge}) { @content; }
  } @else if $size == 'small' and $direction == 'up' {
    @media (min-width: #{$small}) { @content; }
  } @else if $size == 'medium' and $direction == 'up' {
    @media (min-width: #{$medium}) { @content; }
  } @else if $size == 'large' and $direction == 'up' {
    @media (min-width: #{$large}) { @content; }
  } @else if $size == 'xlarge' and $direction == 'up' {
    @media (min-width: #{$xlarge}) { @content; }
  } @else if str-index(#{$size}, 'px') and $direction == 'down' {
    @media (max-width: #{$size}) { @content; }
  } @else if str-index(#{$size}, 'px') and $direction == 'up' {
    @media (min-width: #{$size}) { @content; }
  }    
  
}

/*
** Flex Classes 
*/

@mixin direction($dir) {
  [class*="--#{$dir}"] {
    flex-direction: #{$dir};
  }
}
@mixin wrap($wrap) {
  [class*="--#{$wrap}"] {
    flex-wrap: #{$wrap};
  }
}
@mixin justify($dir) {
  [class*="--justify-#{$dir}"] {
    @if($dir == start or $dir == end) {
      justify-content: flex-#{$dir};
    } @else if($dir == around or $dir == between) {
      justify-content: space-#{$dir};
    } @else {
      justify-content: #{$dir};
    }
  }
}
@mixin align($dir) {
  [class*="--align-#{$dir}"] {
    @if($dir == start or $dir == end) {
      align-items: flex-#{$dir};
    } @else {
      align-items: #{$dir};
    }
  }
}


/*
** Create breakpoint for the columns class
*/
@mixin create-breakpoint($breakpoint, $min-or-max) {
  @if($breakpoint == 0) {
    @content;
  } @else {
    @media screen and ( #{$min-or-max}-width: $breakpoint ) {
      @content;
    }
  }
}


@mixin create-bp($breakpoint, $min-or-max) {
  @media ( #{$min-or-max}-width: $breakpoint ) {
    @content;
  }
}

/*
** Create columns class
*/
@mixin create-columns-class($modifier, $grid-column-count, $col-base, $breakpoint) {
  @include create-breakpoint($breakpoint, 'min') {
    @for $i from 1 through $grid-column-count {
      .#{$modifier}-#{$i} {
        flex-basis: calc( (#{$col-base} * #{$i}) );
      }
    }
  }
}

/*
** Create hidden class
** Ex : .hide-for-large-up / .hide-for-medium-down
*/
@mixin create-hidden-class($modifier, $breakpoint) {
  @include create-breakpoint($breakpoint, 'max') {
    .hide-for-#{$modifier}-down {
      display: none !important;
    }
  }
  @include create-breakpoint($breakpoint, 'min') {
    .hide-for-#{$modifier}-up {
      display: none !important;
    }
  }
}

/*
** Create center class
** Ex : .small-column-centered / .large-row-centered
*/
@mixin create-column-center($modifier, $breakpoint) {
  @include create-breakpoint($breakpoint, 'max') {
    .#{$modifier}-column-centered {
      align-items: center;
    }
    .#{$modifier}-row-centered {
      justify-content: center!important;
    }
  }
}

